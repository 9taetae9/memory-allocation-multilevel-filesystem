Project Overview
This project focuses on understanding and applying the memory and file system structure of the xv6 operating system. 

It comprises two main components.

1. SSU Memory Allocation

Objective: Implement and test new memory allocation functions in the xv6 operating system, namely ssualloc(), getvp(), and getpp().
Functionality
ssualloc() System Call
Allocates virtual memory.
Takes one parameter, which is the size of the virtual memory to be allocated. 
The parameter must be a positive number and a multiple of the page size. 
If an invalid value is provided, it returns -1. If valid, it returns the address of the allocated memory.
Allocates virtual memory without allocating physical memory. 
Physical memory is allocated on a per-page basis when the user accesses an unallocated virtual memory page.

getvp() and getpp() Functions : No parameters are required.
getvp(): Returns the number of virtual memory pages of the calling process.
getpp(): Returns the number of physical memory pages of the calling process.

2. Multi-Level File System
Objective: Extend the structure of the xv6 file system to support a multi-level file system.

Features
Modifies the original xv6 file system structure to include 6 direct blocks, 4 indirect blocks
, 2 two-level indirect blocks, and 1 three-level indirect block.
Supports up to 2,130,438 data blocks, allowing for approximately 1GB file sizes.
Involves modifying the FSSIZE in param.h from 1000 to 2500000 to accommodate large file creation.
The implementation is tested using ssufs_test to ensure correctness.
